
//0xca35b7d915458ef540ade6068dfe2f44e8fa733c - retailer

//0x14723a09acff6d2a60dcdf7aa4aff308fddc160c - Manufacturer

//0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db - Buyer

//0xdd870fa1b7c4700f2bd7f44238821c26f7392148 - Supplier

contract SupplyChain {

enum Actor{ Others, Producer, Retailer, Supplier, Customer}

enum Commoditytype{ meat, Jewelry, Shrimp, Others}

enum Phase{ Supplier, Producer, Dealer, Retailer, Customer}

struct User{

bytes32 ID;

bytes32 name;

Actor actor;

}

struct Commodity{

bytes32 commodityID;

bytes32 commodityName;

uint produceTime;

bytes32 producerName;

uint[] timestamps;

bytes32[] supplierNames;

uint[] supplytimestamps;

bytes32[] retailerNames;

uint sellTime;

bytes32 customerName;

bool isBinding;

address owner;

}

mapping(address => User) producerMap;

mapping(address => User) retailerMap;

mapping(address => User) supplierMap;

mapping(address => User) customerMap;

mapping(bytes32 => Commodity) commodityMap;

address[] _owners;

address _currentOwner;

address _nextOwner;

struct Location {

string name;

uint locationId;

uint previousLocationId;

uint timestamp;

string secret;

}

bytes32[] _locationSecrets;

mapping(uint => Location) Trail;

uint8 TrailCount;

///////////////////////////////////////OWNERSHIP/////////////////////////////

function setNextOwner(address nextOwner) private returns(bool set) {

if (_currentOwner != msg.sender) {

return false;

}

_nextOwner = nextOwner;

return true;

}

function confirmOwnership() private returns(bool confirmed) {

if (_nextOwner != msg.sender) {

return false;

}

_owners.push(_nextOwner);

_currentOwner = _nextOwner;

_nextOwner = address(0);

return true;

}

function getUsers() private constant returns (address[]) {

return _owners;

}

function SupplyChain() {

_currentOwner = msg.sender;

_owners.push(msg.sender);

}

///////////////////////////////////////SUPPLYCHAIN/////////////////////////////

function newUser(bytes32 ID, bytes32 name,Actor actor) private returns(bool, string){

User user;

if(actor == Actor.Producer){

user = producerMap[msg.sender];

}else if(actor == Actor.Retailer){

user = retailerMap[msg.sender];

}else if(actor == Actor.Supplier){

user = supplierMap[msg.sender];

}else if(actor == Actor.Customer){

user = customerMap[msg.sender];

}else{

return (false,"the actor is not belong");

}

if(msg.sender != _owners[_owners.length - 1] ){

return (false, "this ID has been occupied!");

}

user.ID = ID;

user.name = name;

user.actor = actor;

return (true, "Success");

}

// Это интерфейс для производителя

function newProduct(bytes32 commodityID, bytes32 commodityName,

uint timestamp, bytes32 _secret) private returns(bool,bytes32){

Commodity commodity = commodityMap[commodityID];

if(commodity.commodityID != 0x0) {

return (false,"The commodityID already exist!");

}

User user = producerMap[msg.sender];

if(_currentOwner != 0x14723a09acff6d2a60dcdf7aa4aff308fddc160c || msg.sender != _owners[_owners.length - 1]) {

return (false,"You have not enough premissions");

}

if(_secret != _locationSecrets[_locationSecrets.length - 1]) {

return(false, "wrong Location");

}

commodity.commodityID = commodityID;

commodity.commodityName = commodityName;

commodity.produceTime = timestamp;

commodity.producerName = user.name;

return (true,"Success,produce a new product");

}

function CommodityTransfer(bytes32 commodityID,uint timestamp) private returns(bool, string){

Commodity commodity = commodityMap[commodityID];

if(commodity.commodityID == 0x0) {

return (false,"The commodityID don't exist!");

}

User user = supplierMap[msg.sender];

if(_currentOwner != 0xdd870fa1b7c4700f2bd7f44238821c26f7392148 || msg.sender != _owners[_owners.length - 1]) {

return (false,"You have not enough premissions");

}

commodity.supplytimestamps.push(timestamp);

commodity.supplierNames.push( user.name );

return (true,"Success");

}

// Интерфейс для ритейлера

function retailerInnerTransfer(bytes32 commodityID,uint timestamp) private returns(bool, string){

Commodity commodity = commodityMap[commodityID];

if(commodity.commodityID == 0x0) {

return (false,"The commodityID don't exist!");

}

User user = retailerMap[msg.sender];

if(_currentOwner != 0xca35b7d915458ef540ade6068dfe2f44e8fa733c || msg.sender != _owners[_owners.length - 1]) {

return (false,"You have not enough premissions");

}

commodity.timestamps.push(timestamp);

commodity.retailerNames.push( user.name );

return (true,"Success");

}

function fromRetailerToCustomer(bytes32 commodityID,uint timestamp) private returns(bool, string){

Commodity commodity = commodityMap[commodityID];

if(commodity.commodityID == 0x0 ) {

return (false,"The commodityID don't exist!");

}

User user = retailerMap[msg.sender];

if(_currentOwner != 0xca35b7d915458ef540ade6068dfe2f44e8fa733c || msg.sender != _owners[_owners.length - 1]) {

return (false,"You have not enough premissions");

}

commodity.sellTime = timestamp;

return (true,"Success,Has been sold");

}

// Интерфейс для проверки

function getCommodityRecords(bytes32 commodityID) public returns(bool,string,

bytes32 producerName,uint produceTime, uint[] supplytimestamps, bytes32[] supplierNames, bytes32[] retailerNames,uint[] retailerTimes

, bytes32 customerName,uint sellTime){

if(msg.sender == 0x0){

return (false,"you have no access",producerName, produceTime, supplytimestamps, supplierNames, retailerNames, retailerTimes, customerName,commodity.sellTime);

}

Commodity commodity = commodityMap[commodityID];

if(commodity.commodityID == 0x0){

return (false,"The commodityID is not exist",producerName, produceTime, supplytimestamps, supplierNames, retailerNames, retailerTimes,customerName,commodity.sellTime);

}

return (true,"Success",commodity.producerName, commodity.produceTime, commodity.supplytimestamps, commodity.supplierNames, commodity.retailerNames, commodity.timestamps, commodity.customerName,commodity.sellTime);

}

///////////////////////////////////////LOCATIONS/////////////////////////////

function addNewLocation(uint locationId, string name,bytes32 secret) private {

if(_currentOwner != 0xca35b7d915458ef540ade6068dfe2f44e8fa733c || msg.sender != _owners[_owners.length - 1]) {

throw;

}

Location memory newLocation;

newLocation.name = name;

newLocation.locationId = locationId;

//newLocation.secret = secret;

_locationSecrets.push(secret);

newLocation.timestamp = now;

if (TrailCount!=0) {

newLocation.previousLocationId = Trail[TrailCount].locationId;

}

Trail[TrailCount] = newLocation;

TrailCount++;

}

function getTrailCount() returns(uint8) {

return TrailCount;

}

function getLocation(uint8 trailNo) returns(string,uint,uint,uint) {

return (Trail[trailNo].name,Trail[trailNo].locationId,Trail[trailNo].previousLocationId,Trail[trailNo].timestamp);

}

}
