
//0xca35b7d915458ef540ade6068dfe2f44e8fa733c - retailer

//0x14723a09acff6d2a60dcdf7aa4aff308fddc160c - Manufacturer

//0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db - Buyer

//0xdd870fa1b7c4700f2bd7f44238821c26f7392148 - Supplier

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SupplyChain {
    // Enums
    enum Actor { Others, Producer, Retailer, Supplier, Customer }
    enum CommodityType { Meat, Jewelry, Shrimp, Others }
    enum Phase { Supplier, Producer, Dealer, Retailer, Customer }

    // Structs
    struct User {
        bytes32 id;
        bytes32 name;
        Actor actor;
        bool isRegistered;
    }

    struct Commodity {
        bytes32 commodityID;
        bytes32 commodityName;
        CommodityType commodityType;
        uint produceTime;
        bytes32 producerName;
        uint[] timestamps;
        bytes32[] supplierNames;
        uint[] supplyTimestamps;
        bytes32[] retailerNames;
        uint sellTime;
        bytes32 customerName;
        address owner;
    }

    struct Location {
        string name;
        uint locationId;
        uint previousLocationId;
        uint timestamp;
        bytes32 secretHash;
    }

    // State variables
    address public owner;
    mapping(address => User) public users;
    mapping(bytes32 => Commodity) public commodities;
    mapping(uint => Location) public trail;
    uint8 public trailCount;
    address[] public ownershipHistory;

    // Events
    event UserRegistered(address indexed userAddress, bytes32 id, Actor actor);
    event CommodityCreated(bytes32 indexed commodityID, address indexed producer);
    event CommodityTransferred(bytes32 indexed commodityID, address indexed from, address indexed to);
    event LocationAdded(uint indexed locationId, string name);

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized: Owner only");
        _;
    }

    modifier onlyRegistered() {
        require(users[msg.sender].isRegistered, "User not registered");
        _;
    }

    modifier onlyActor(Actor _actor) {
        require(users[msg.sender].actor == _actor, "Invalid actor role");
        _;
    }

    // Constructor
    constructor() {
        owner = msg.sender;
        ownershipHistory.push(msg.sender);
    }

    // User Management
    function registerUser(bytes32 _id, bytes32 _name, Actor _actor) 
        external 
        returns (bool success) 
    {
        require(!users[msg.sender].isRegistered, "User already registered");
        require(_actor != Actor.Others, "Invalid actor type");

        users[msg.sender] = User({
            id: _id,
            name: _name,
            actor: _actor,
            isRegistered: true
        });
        
        emit UserRegistered(msg.sender, _id, _actor);
        return true;
    }

    // Commodity Management
    function createCommodity(
        bytes32 _commodityID,
        bytes32 _commodityName,
        CommodityType _type,
        bytes32 _secretHash
    ) 
        external 
        onlyRegistered 
        onlyActor(Actor.Producer) 
        returns (bool success) 
    {
        require(commodities[_commodityID].commodityID == 0, "Commodity ID already exists");

        commodities[_commodityID] = Commodity({
            commodityID: _commodityID,
            commodityName: _commodityName,
            commodityType: _type,
            produceTime: block.timestamp,
            producerName: users[msg.sender].name,
            timestamps: new uint[](0),
            supplierNames: new bytes32[](0),
            supplyTimestamps: new uint[](0),
            retailerNames: new bytes32[](0),
            sellTime: 0,
            customerName: bytes32(0),
            owner: msg.sender
        });

        emit CommodityCreated(_commodityID, msg.sender);
        return true;
    }

    // Transfer Functions
    function supplierTransfer(bytes32 _commodityID, uint _timestamp) 
        external 
        onlyRegistered 
        onlyActor(Actor.Supplier) 
        returns (bool success) 
    {
        Commodity storage commodity
